Сущности бизнес модели: пользователь и посты

Техническое задание
Разработать REST API сервис на технологии Spring Boot, позволяющий пользователям вести свой блог путем выкладывания постов. Один пользователь может создавать много постов, а каждый пост принадлежит только одному конкретному пользователю.

Требования к сущности "Пользователь":
1) Наличие уникального идентификатора, генерируемый стандартом UUID;
2) Имя пользователя  - уникальная строка, представляющая имя пользователя (размер от 5 до 15 символов, разрешенные символы);
3) Электронная почта - строка, представляющая адрес электронной почты пользователя;
4) Дата регистрации - дата и время регистрации пользователя;
5) Пароль - строка, представляющая хэш пароля пользователя;
6) Дата рождения - дата и время рождения пользователя (пользователь не может быть старше 100 лет или иметь дату рождения в будущем).

Требования к сущности "Пост":
1) Наличие уникального идентификатора, генерируемый стандартом UUID;
2) Содержание поста - текстовые данные (размер от 1 до 280 символов);
4) Дата создания - дата и время создания поста.

Информация о всех сущностях хранится в базе данных PostgreSQL.

Приложение должно позволять пользователю проводить такие действия как:
1) Регистрация в сервисе - При регистрации указывается имя, электронная почта, дата рождения и пароль пользователя. Если значения имени и почты уникальны, то система должна зарегистрировать пользователя, иначе вернуть соответствующую ошибку. При регистрации пользователя пароль сохраняется с помощью функции хеширования BCrypt силой хеширования равной 12. Дата регистрации и уникальный идентфикатор UUID присваивается автоматически;
3) Создание поста - Пользователь отправляет текстовое содержимое поста. Если размер содержимого поста соотвествует требованиям описанным с разделе сущности "Пост", то пост сохраняется в базу данных, иначе возвращается соотвествующая ошибка. При сохранении ему автоматически присваивается дата создания, уникальный идентификатор UUID и автор создавший этот пост.;
4) Удаление поста - Пользователь отправляет уникальный идентификатор поста. Если такой пост существует и принадлежит пользователю, то он удаляется из базы данных, иначе возвращается соотвествующая ошибка;
5) Редактирования поста - Пользователь отправляет уникальный идентификатор поста и измененное содержимое поста. Если такой пост существует, принадлежит пользователю и его содержимое соотвествует требованиям описанным с разделе сущности "Пост", то пост сохраняется в базу данных, иначе возвращается соотвествующая ошибка;
6) Удаление аккаунта - Пользователь отправляет запрос на удаление аккаунта. Пользователь и все принадлежащие ему посты удаляются из база данных;
7) Просмотр постов других пользователей - Пользователь может просматривать посты других пользователей. Для просмотра требуется пагинация;
8) Просмотр информации о других пользователях - Пользователь может просматривать информацию о других пользователях, такую как имя пользователя и его дату рождения;
9) Поиск пользователей - Пользователь может получить список пользователей, чье имя начинается на введенную строку. Длина строки для поиска по ней должна составлять от 1 до 15 символов. 